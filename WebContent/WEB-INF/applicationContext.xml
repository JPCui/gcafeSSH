<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-3.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

<!-- ======================================== c3p0 -->
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
      <property name="locations">
          <list>
              <value>classpath:jdbc.properties</value>
          </list>
      </property>
  </bean>

 <bean id="dataSource"
    class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="driverClass" value="${jdbc.driverClassName}"/>
    <property name="jdbcUrl" value="${jdbc.url}"/>
    <property name="user" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>

    <!-- 连接池参数 -->
    <!-- 池中保留的最小连接数 10个 -->
    <property name="minPoolSize" value="10"/>

    <!-- 池中保留的最大连接数 默认15个 -->
    <property name="maxPoolSize" value="20"/>

    <!-- 初始化时活得的连接数 -->
    <property name="initialPoolSize" value="10"/>

    <!-- 连接的最大空闲时间，超过这个时间，如果这个连接还没有被使用，则连接被丢弃 0为永不丢弃，默认为0 -->
    <property name="maxIdleTime" value="60"/>

    <!-- 当连接池中的连接耗尽时，c3p0一次获取的连接数 -->
    <property name="acquireIncrement" value="5"/>

    <!--
       JDBC标准参数，用以控制数据源内加载的PreparedStatement数量
       但是，由于预缓存的statements属于单个connection而不是整个连接池
       所以设置这个参数需要考虑到多方面的因素
       如果，maxStatements与maxStatementsPerConnection均为0，则缓存被关闭，默认：0
     -->
    <property name="maxStatements" value="0"/>

    <!-- 每60秒检查连接池中的所有空闲连接 -->
    <property name="idleConnectionTestPeriod" value="60"/>


    <!-- 定义从数据库获取新连接失败后重复尝试的次数 默认：30 -->
    <property name="acquireRetryAttempts" value="30"/>

    <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
    时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
    等方法来提升连接测试的性能。Default: false -->
    <property name="testConnectionOnCheckout" value="false"/>

  </bean>

<!-- ======================================== 事务 -->
  <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>

  <!--
    定义执行模式和设定事物的方法。
    transaction-manager="transactionManager" 设置可以省略。
  -->
  <tx:advice id="transactionInterceptor" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="execute*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
      <tx:method name="add*" propagation="REQUIRED"/>
      <tx:method name="insert*" propagation="REQUIRED"/>
      <tx:method name="get*" read-only="true" propagation="REQUIRED"/>
      <tx:method name="find*" read-only="true" propagation="REQUIRED"/>
      <tx:method name="select*" read-only="true" propagation="REQUIRED"/>
      <tx:method name="save*" propagation="REQUIRED"/>
      <tx:method name="update*" propagation="REQUIRED"/>
      <tx:method name="remove*" propagation="REQUIRED"/>
      <tx:method name="delete*" propagation="REQUIRED"/>
      </tx:attributes>
  </tx:advice>

<!-- ======================================== AOP -->
<!--   <aop:config>
    <aop:pointcut id="daoBeans" expression="bean(*DAO)"/>
    <aop:advisor pointcut-ref="daoBeans" advice-ref="transactionInterceptor"/>
  </aop:config> -->
  <aop:config>
    <aop:pointcut id="dLogicBeans"  expression="bean(*DLogic)"/>
    <aop:advisor
         pointcut-ref="dLogicBeans"
         advice-ref="transactionInterceptor"/>
  </aop:config>

<!-- ======================================== hibernate -->
  <bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
      <!-- connection -->
      <property name="dataSource">
          <ref local="dataSource" />
      </property>
      <!-- hibernate自身属性 -->
      <property name="hibernateProperties">
          <props>
              <prop key="hibernate.show_sql">true</prop>
              <prop key="hibernate.format_sql">true</prop>
              <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
              <prop key="hibernate.hbm2ddl.auto">update</prop>
              <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
              <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
              <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
          </props>
      </property>

      <!-- 映射文件 -->
      <property name="mappingResources">
        <list>
          <value>cn/rakuchi/gcafe/login/dao/login.hbm.xml</value>
          <value>cn/rakuchi/gcafe/shop/dao/shop.hbm.xml</value>
          <value>cn/rakuchi/gcafe/ghs/dao/ghs.hbm.xml</value>
        </list>
      </property>
  </bean>


<!-- ======================================== 消息 -->
  <bean id="messageSource"
        class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basenames" value="application-messages"/>
  </bean>

<!-- ======================================== Hibernate3DAO -->
  <!-- 查询DAO -->
  <!--
  <bean id="queryDAO"
        class="cn.rakuchi.fw.hibernate.QueryDAOHibernateImpl">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>
  -->

  <!-- 修改DAO -->
  <!--
  <bean id="updateDAO"
        class="cn.rakuchi.fw.hibernate.UpdateDAOHibernateImpl">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>
  -->
</beans>

